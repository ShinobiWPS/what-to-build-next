generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(uuid())
  userKnownStacks            Json       @default("[]")
  followJobMarketSkillsDemand Boolean   @default(false)
  learnNewTech               Boolean   @default(false)
  accounts                   Account[]
  sessions                   Session[]    

  // Add these fields for OAuth support
  email                      String?   @unique
  name                       String?
  image                      String?
  emailVerified              DateTime?


  projects                   Project[] @relation("UserProjects")
  queries                    ProjectListOrderQuery[]
  shared                     UserSharing[] @relation("UserShares")
  gaveAccessTo               UserSharing[] @relation("GaveAccess")
  gotAccessTo                UserSharing[] @relation("GotAccess")
}

model Project {
  id        String      @id @default(uuid())
  title     String
  type      ProjectType
  owner     User        @relation("UserProjects", fields: [ownerId], references: [id])
  ownerId   String
}

model TechnologiesPreferences {
  id          String  @id @default(uuid())
  description String
}

model FeaturePreferences {
  id          String  @id @default(uuid())
  description String
}

model ProjectListOrderQuery {
  id                          String   @id @default(uuid())
  priority                    Priority
  featureWannaBuild           String
  followJobMarketSkillsDemand Boolean
  learnNewTech                Boolean
  userKnownStacks             Json  @default("[]")
  techPreferences             Json @default("[]")

  user     User    @relation(fields: [userId], references: [id])
  userId   String
}

model UserSharing {
  user           User   @relation("UserShares", fields: [userId], references: [id])
  userId         String

  gaveAccessTo   User   @relation("GaveAccess", fields: [gaveAccessToId], references: [id])
  gaveAccessToId String   @map("gaveAccessTo")

  gotAccessTo    User   @relation("GotAccess", fields: [gotAccessToId], references: [id])
  gotAccessToId  String   @map("gotAccessTo")

  @@id([userId, gaveAccessToId, gotAccessToId])
}

enum ProjectType {
  personal
  contribution
}

enum Priority {
  profit
  exposure
  personal_need
}

//////

// prisma/schema.prisma - add at bottom
model Account {
  id                 String  @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  type               String
  access_token       String? @map("accessToken")
  expires_at         Int?
  id_token           String?
  scope              String?
  token_type         String?
  refresh_token      String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

